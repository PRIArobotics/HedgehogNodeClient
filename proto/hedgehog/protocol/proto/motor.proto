syntax = "proto3";

package hedgehog.protocol.proto;

option java_package = "at.pria.hedgehog.protocol.proto";
option java_outer_classname = "MotorP";

// <GSL customizable: module-extras>
import "hedgehog/protocol/proto/subscription.proto";

enum MotorState {
    // The motor receives constant power
    // set amount to 0 (or skip it) to turn the motor off
    POWER = 0;
    // The motor is braked by connecting its two pins
    // The amount field specifies the duty cycle with which the motor is braked
    // setting amount to 0 (or skipping it) is equivalent to a full brake
    BRAKE = 1;
    // The motor is controlled to have a constant velocity
    // set amount to 0 (or skip it) to actively keeping in one position
    VELOCITY = 2;
}

message DcConfig {}

message EncoderConfig {
    uint32 encoder_a_port = 1;
    uint32 encoder_b_port = 2;
}

message StepperConfig {}
// </GSL customizable: module-extras>

// Command for one motor. By setting a relative or absolute goal position,
// the motor will go into `reached_state` upon reaching the position.
//
// => (port, state, amount):  indefinite motor action => ack
// => (port, state, amount, reached_state, relative/absolute):  terminating motor action => ack
message MotorAction {
    uint32 port = 1;
    // the state to set
    MotorState state = 2;
    // the amount (power, velocity) to set for the action
    sint32 amount = 3;
    // if a goal position is given, upon reaching the position,
    // the motor will go into this state (with amount = 0 if relevant), i.e.:
    // POWER: turn off
    // BRAKE: full brake
    // VELOCITY: freeze
    MotorState reached_state = 4;
    // set one of these to run the action until a goal position is reached
    oneof position {
        sint32 relative = 5;
        sint32 absolute = 6;
    }
}

// Configures one motor for DC, encoder, or stepper operation.
// Stepper configuration requires two motor ports to be combined into one stepper
// motor and thus only works for even motor ports (i.e. 0 and 2).
//
// => (port, config):        motor config action => ack
message MotorConfigAction {
    uint32 port = 1;
    oneof config {
        DcConfig dc = 2;
        EncoderConfig encoder = 3;
        StepperConfig stepper = 4;
    }
}

// Request or reply for one motor's current command.
// The command may change by a motor action, or by reaching the goal position of a terminating motor action.
//
// => (port):                motor command request => motor command reply
// <= (port, config, state, amount):  motor command reply
// => (port, subscription):  motor command subscribe => ack
// <- (port, config, state, amount, subscription):  motor command update
message MotorCommandMessage {
    uint32 port = 1;
    oneof config {
        DcConfig dc = 5;
        EncoderConfig encoder = 6;
        StepperConfig stepper = 7;
    }
    MotorState state = 2;
    sint32 amount = 3;
    Subscription subscription = 4;
}

// Request or reply for one motor's state. The motor state may generally change at any time,
// but returned values are approximations, and motor state requests may not be supported at all.
//
// => (port):                motor state request => motor state reply
// <= (port, velocity, position):  motor state reply
// => (port, subscription):  motor state subscribe => ack
// <- (port, velocity, position, subscription):  motor state update
message MotorStateMessage {
    uint32 port = 1;
    sint32 velocity = 2;
    sint32 position = 3;
    Subscription subscription = 4;
}

// Set one motor's position counter.
//
// => (port, position):      set motor position action => ack
message MotorSetPositionAction {
    uint32 port = 1;
    sint32 position = 2;
}
