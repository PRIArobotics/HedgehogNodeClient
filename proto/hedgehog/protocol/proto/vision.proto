syntax = "proto3";

package hedgehog.protocol.proto;

option java_package = "at.pria.hedgehog.protocol.proto";
option java_outer_classname = "VisionP";

// <GSL customizable: module-extras>
message FacesChannel {}

message ContoursChannel {
    fixed32 hsv_min = 1;
    fixed32 hsv_max = 2;
}

message Channel {
    oneof channel {
        FacesChannel faces = 1;
        ContoursChannel contours = 2;
    }
}
// </GSL customizable: module-extras>

// Opens or closes the camera. When the camera is open,
// frames will be read at the camera's speed and decoded at the caller's speed.
// Similar to a subscription, the camera must be closed as many times as it was opened.
// It will remain open until it is closed the appropriate number of times.
// 
// The channels specified define what analysis is performed on each frame that is retrieved.
// Re-opening the camera with new channel definitions will overwrite the old ones,
// except if no channels are specified. In that case the previous configuration is preserved.
// When closing, channels are ignored and should remain empty.
//
// => (*channels):           open camera action => ack
// => ():                    close camera action => ack
message VisionCameraAction {
    bool open = 1;
    repeated Channel channels = 2;
}

// Decodes and retrieved the latest grabbed frame.
// While frames arrive regularly, they are only retrieved on demand with this command.
// It is assumed that a retrieved frame will be used,
// and thus all channel processing is done at this time.
// This action is therefore a relatively expensive operation.
//
// => ():                    read frame action => ack
message VisionRetrieveFrameAction {
}

// Request or reply for the current frame,
// optionally with highlighting for one of the channels added in the image.
// A highlight value of -1 means no highlighting,
// a different value means the index of the channel when opening the camera.
// 
// The frame itself is a jpg encoded image.
//
// => (highlight):           frame request => frame reply
// <= (highlight, frame):    frame reply
message VisionFrameMessage {
    int32 highlight = 1;
    bytes frame = 2;
}
