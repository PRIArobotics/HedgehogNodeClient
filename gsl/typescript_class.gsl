.template 0
 ignorecase = 0

 function fields_list
  if count(field) = count(->message.field)
    return ""
  else
    result = ""
    for field
      result += "'$(name)'$(!last() ?? ", " ? (first() ?? "," ? ""))"
    endfor
    return ", fields=($(result))"
  endif
 endfunction

 function init_param_list
   result = ""
   for field
     for field
       # oneof
       result += "public $(name)?: $(->typescript.type)"
     else
       # regular field
       result += "public $(name): $(->typescript.type)"
       if defined(->typescript.default)
         result += " = $(->typescript.default)"
       endif
     endfor
     if !last()
       result += ", "
     endif
   endfor
   return result
 endfunction

 macro parse_field
.  for field
.    # oneof
        let $(name) = msg.$(name) if msg.HasField('$(name)') else None;
.  else
.    # regular field
.    if (kind ? "") = "nested"
        let $(name) = msg.$(name) if msg.HasField('$(name)') else None;
.    else
        let $(name) = msg.get$(name:Pascal)();
.    endif
.  endfor
.endmacro

 function msg_param_list
   result = ""
   for field
     for field
       # oneof
       result += "$(name)$(last() ?? "" ? ", ")"
     else
       # regular field
       result += "$(name)$(last() ?? "" ? ", ")"
     endfor
   endfor
   return result
 endfunction

 macro serialize_field
.  for field
.    # oneof
        if this.$(name) is not None:
            msg.set$(name:Pascal)(this.$(name));
.  else
.    # regular field
.    if defined(repeated)
        msg.$(name).extend(this.$(name));
.    else
        msg.set$(name:Pascal)(this.$(name));
.    endif
.  endfor
.endmacro

.endtemplate
.template 1
@$(decorator)($(->message.full_name), PayloadCase.$(->message.oneof_name:Upper))
export class $(name) extends Message {
.if type = "upd"
    async = true;

.endif
    constructor($(init_param_list())) {
        super();
    }
.if !defined(complex)

    static parseFrom(containerMsg: ProtoContainerMessage): Message {
        let msg = (<any> containerMsg).get$(->message.oneof_name:Pascal)();
.for field
.  parse_field()
.endfor
        return new $(name)($(msg_param_list()));
    }
.endif

    serializeTo(containerMsg: ProtoContainerMessage): void {
        let msg = new $(->message.full_name)();
.for field
.  serialize_field()
.endfor
        (<any> containerMsg).set$(->message.oneof_name:Pascal)(msg);
    }
}
.endtemplate
