/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.hedgehog.protocol.proto.AnalogRequest', null, global);
goog.exportSymbol('proto.hedgehog.protocol.proto.AnalogUpdate', null, global);
goog.exportSymbol('proto.hedgehog.protocol.proto.DigitalRequest', null, global);
goog.exportSymbol('proto.hedgehog.protocol.proto.DigitalUpdate', null, global);
goog.exportSymbol('proto.hedgehog.protocol.proto.IOStateAction', null, global);
goog.exportSymbol('proto.hedgehog.protocol.proto.IOStateFlags', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hedgehog.protocol.proto.IOStateAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hedgehog.protocol.proto.IOStateAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hedgehog.protocol.proto.IOStateAction.displayName = 'proto.hedgehog.protocol.proto.IOStateAction';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hedgehog.protocol.proto.IOStateAction.prototype.toObject = function(opt_includeInstance) {
  return proto.hedgehog.protocol.proto.IOStateAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hedgehog.protocol.proto.IOStateAction} msg The msg instance to transform.
 * @return {!Object}
 */
proto.hedgehog.protocol.proto.IOStateAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    port: jspb.Message.getFieldWithDefault(msg, 1, 0),
    flags: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hedgehog.protocol.proto.IOStateAction}
 */
proto.hedgehog.protocol.proto.IOStateAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hedgehog.protocol.proto.IOStateAction;
  return proto.hedgehog.protocol.proto.IOStateAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hedgehog.protocol.proto.IOStateAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hedgehog.protocol.proto.IOStateAction}
 */
proto.hedgehog.protocol.proto.IOStateAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    case 2:
      var value = /** @type {!proto.hedgehog.protocol.proto.IOStateFlags} */ (reader.readEnum());
      msg.setFlags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.hedgehog.protocol.proto.IOStateAction} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.hedgehog.protocol.proto.IOStateAction.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hedgehog.protocol.proto.IOStateAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.hedgehog.protocol.proto.IOStateAction.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPort();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getFlags();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional uint32 port = 1;
 * @return {number}
 */
proto.hedgehog.protocol.proto.IOStateAction.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.hedgehog.protocol.proto.IOStateAction.prototype.setPort = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional IOStateFlags flags = 2;
 * @return {!proto.hedgehog.protocol.proto.IOStateFlags}
 */
proto.hedgehog.protocol.proto.IOStateAction.prototype.getFlags = function() {
  return /** @type {!proto.hedgehog.protocol.proto.IOStateFlags} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.hedgehog.protocol.proto.IOStateFlags} value */
proto.hedgehog.protocol.proto.IOStateAction.prototype.setFlags = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hedgehog.protocol.proto.AnalogRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hedgehog.protocol.proto.AnalogRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hedgehog.protocol.proto.AnalogRequest.displayName = 'proto.hedgehog.protocol.proto.AnalogRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hedgehog.protocol.proto.AnalogRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hedgehog.protocol.proto.AnalogRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hedgehog.protocol.proto.AnalogRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.hedgehog.protocol.proto.AnalogRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    port: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hedgehog.protocol.proto.AnalogRequest}
 */
proto.hedgehog.protocol.proto.AnalogRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hedgehog.protocol.proto.AnalogRequest;
  return proto.hedgehog.protocol.proto.AnalogRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hedgehog.protocol.proto.AnalogRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hedgehog.protocol.proto.AnalogRequest}
 */
proto.hedgehog.protocol.proto.AnalogRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.hedgehog.protocol.proto.AnalogRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.hedgehog.protocol.proto.AnalogRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hedgehog.protocol.proto.AnalogRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.hedgehog.protocol.proto.AnalogRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPort();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 port = 1;
 * @return {number}
 */
proto.hedgehog.protocol.proto.AnalogRequest.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.hedgehog.protocol.proto.AnalogRequest.prototype.setPort = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hedgehog.protocol.proto.AnalogUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hedgehog.protocol.proto.AnalogUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hedgehog.protocol.proto.AnalogUpdate.displayName = 'proto.hedgehog.protocol.proto.AnalogUpdate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hedgehog.protocol.proto.AnalogUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.hedgehog.protocol.proto.AnalogUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hedgehog.protocol.proto.AnalogUpdate} msg The msg instance to transform.
 * @return {!Object}
 */
proto.hedgehog.protocol.proto.AnalogUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    port: jspb.Message.getFieldWithDefault(msg, 1, 0),
    value: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hedgehog.protocol.proto.AnalogUpdate}
 */
proto.hedgehog.protocol.proto.AnalogUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hedgehog.protocol.proto.AnalogUpdate;
  return proto.hedgehog.protocol.proto.AnalogUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hedgehog.protocol.proto.AnalogUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hedgehog.protocol.proto.AnalogUpdate}
 */
proto.hedgehog.protocol.proto.AnalogUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.hedgehog.protocol.proto.AnalogUpdate} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.hedgehog.protocol.proto.AnalogUpdate.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hedgehog.protocol.proto.AnalogUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.hedgehog.protocol.proto.AnalogUpdate.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPort();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getValue();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 port = 1;
 * @return {number}
 */
proto.hedgehog.protocol.proto.AnalogUpdate.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.hedgehog.protocol.proto.AnalogUpdate.prototype.setPort = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 value = 2;
 * @return {number}
 */
proto.hedgehog.protocol.proto.AnalogUpdate.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.hedgehog.protocol.proto.AnalogUpdate.prototype.setValue = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hedgehog.protocol.proto.DigitalRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hedgehog.protocol.proto.DigitalRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hedgehog.protocol.proto.DigitalRequest.displayName = 'proto.hedgehog.protocol.proto.DigitalRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hedgehog.protocol.proto.DigitalRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hedgehog.protocol.proto.DigitalRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hedgehog.protocol.proto.DigitalRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.hedgehog.protocol.proto.DigitalRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    port: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hedgehog.protocol.proto.DigitalRequest}
 */
proto.hedgehog.protocol.proto.DigitalRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hedgehog.protocol.proto.DigitalRequest;
  return proto.hedgehog.protocol.proto.DigitalRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hedgehog.protocol.proto.DigitalRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hedgehog.protocol.proto.DigitalRequest}
 */
proto.hedgehog.protocol.proto.DigitalRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.hedgehog.protocol.proto.DigitalRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.hedgehog.protocol.proto.DigitalRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hedgehog.protocol.proto.DigitalRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.hedgehog.protocol.proto.DigitalRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPort();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 port = 1;
 * @return {number}
 */
proto.hedgehog.protocol.proto.DigitalRequest.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.hedgehog.protocol.proto.DigitalRequest.prototype.setPort = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hedgehog.protocol.proto.DigitalUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hedgehog.protocol.proto.DigitalUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hedgehog.protocol.proto.DigitalUpdate.displayName = 'proto.hedgehog.protocol.proto.DigitalUpdate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hedgehog.protocol.proto.DigitalUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.hedgehog.protocol.proto.DigitalUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hedgehog.protocol.proto.DigitalUpdate} msg The msg instance to transform.
 * @return {!Object}
 */
proto.hedgehog.protocol.proto.DigitalUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    port: jspb.Message.getFieldWithDefault(msg, 1, 0),
    value: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hedgehog.protocol.proto.DigitalUpdate}
 */
proto.hedgehog.protocol.proto.DigitalUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hedgehog.protocol.proto.DigitalUpdate;
  return proto.hedgehog.protocol.proto.DigitalUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hedgehog.protocol.proto.DigitalUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hedgehog.protocol.proto.DigitalUpdate}
 */
proto.hedgehog.protocol.proto.DigitalUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.hedgehog.protocol.proto.DigitalUpdate} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.hedgehog.protocol.proto.DigitalUpdate.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hedgehog.protocol.proto.DigitalUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.hedgehog.protocol.proto.DigitalUpdate.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPort();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getValue();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional uint32 port = 1;
 * @return {number}
 */
proto.hedgehog.protocol.proto.DigitalUpdate.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.hedgehog.protocol.proto.DigitalUpdate.prototype.setPort = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool value = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.hedgehog.protocol.proto.DigitalUpdate.prototype.getValue = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.hedgehog.protocol.proto.DigitalUpdate.prototype.setValue = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.hedgehog.protocol.proto.IOStateFlags = {
  INPUT_FLOATING: 0,
  INPUT_PULLUP: 2,
  INPUT_PULLDOWN: 4,
  OUTPUT_OFF: 1,
  OUTPUT_ON: 9,
  OUTPUT: 1,
  PULLUP: 2,
  PULLDOWN: 4,
  LEVEL: 8
};

goog.object.extend(exports, proto.hedgehog.protocol.proto);
