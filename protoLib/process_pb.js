/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.hedgehog.protocol.proto.ProcessExecuteReply', null, global);
goog.exportSymbol('proto.hedgehog.protocol.proto.ProcessExecuteRequest', null, global);
goog.exportSymbol('proto.hedgehog.protocol.proto.ProcessExitUpdate', null, global);
goog.exportSymbol('proto.hedgehog.protocol.proto.ProcessFileno', null, global);
goog.exportSymbol('proto.hedgehog.protocol.proto.ProcessStreamAction', null, global);
goog.exportSymbol('proto.hedgehog.protocol.proto.ProcessStreamUpdate', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hedgehog.protocol.proto.ProcessExecuteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hedgehog.protocol.proto.ProcessExecuteRequest.repeatedFields_, null);
};
goog.inherits(proto.hedgehog.protocol.proto.ProcessExecuteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hedgehog.protocol.proto.ProcessExecuteRequest.displayName = 'proto.hedgehog.protocol.proto.ProcessExecuteRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hedgehog.protocol.proto.ProcessExecuteRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hedgehog.protocol.proto.ProcessExecuteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hedgehog.protocol.proto.ProcessExecuteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hedgehog.protocol.proto.ProcessExecuteRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.hedgehog.protocol.proto.ProcessExecuteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    workingDir: jspb.Message.getFieldWithDefault(msg, 1, ""),
    argsList: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hedgehog.protocol.proto.ProcessExecuteRequest}
 */
proto.hedgehog.protocol.proto.ProcessExecuteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hedgehog.protocol.proto.ProcessExecuteRequest;
  return proto.hedgehog.protocol.proto.ProcessExecuteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hedgehog.protocol.proto.ProcessExecuteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hedgehog.protocol.proto.ProcessExecuteRequest}
 */
proto.hedgehog.protocol.proto.ProcessExecuteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorkingDir(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addArgs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.hedgehog.protocol.proto.ProcessExecuteRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.hedgehog.protocol.proto.ProcessExecuteRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hedgehog.protocol.proto.ProcessExecuteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.hedgehog.protocol.proto.ProcessExecuteRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getWorkingDir();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getArgsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string working_dir = 1;
 * @return {string}
 */
proto.hedgehog.protocol.proto.ProcessExecuteRequest.prototype.getWorkingDir = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hedgehog.protocol.proto.ProcessExecuteRequest.prototype.setWorkingDir = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated string args = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.hedgehog.protocol.proto.ProcessExecuteRequest.prototype.getArgsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 2));
};


/** @param {!Array.<string>} value */
proto.hedgehog.protocol.proto.ProcessExecuteRequest.prototype.setArgsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.hedgehog.protocol.proto.ProcessExecuteRequest.prototype.addArgs = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.hedgehog.protocol.proto.ProcessExecuteRequest.prototype.clearArgsList = function() {
  this.setArgsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hedgehog.protocol.proto.ProcessExecuteReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hedgehog.protocol.proto.ProcessExecuteReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hedgehog.protocol.proto.ProcessExecuteReply.displayName = 'proto.hedgehog.protocol.proto.ProcessExecuteReply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hedgehog.protocol.proto.ProcessExecuteReply.prototype.toObject = function(opt_includeInstance) {
  return proto.hedgehog.protocol.proto.ProcessExecuteReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hedgehog.protocol.proto.ProcessExecuteReply} msg The msg instance to transform.
 * @return {!Object}
 */
proto.hedgehog.protocol.proto.ProcessExecuteReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    pid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hedgehog.protocol.proto.ProcessExecuteReply}
 */
proto.hedgehog.protocol.proto.ProcessExecuteReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hedgehog.protocol.proto.ProcessExecuteReply;
  return proto.hedgehog.protocol.proto.ProcessExecuteReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hedgehog.protocol.proto.ProcessExecuteReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hedgehog.protocol.proto.ProcessExecuteReply}
 */
proto.hedgehog.protocol.proto.ProcessExecuteReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.hedgehog.protocol.proto.ProcessExecuteReply} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.hedgehog.protocol.proto.ProcessExecuteReply.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hedgehog.protocol.proto.ProcessExecuteReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.hedgehog.protocol.proto.ProcessExecuteReply.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 pid = 1;
 * @return {number}
 */
proto.hedgehog.protocol.proto.ProcessExecuteReply.prototype.getPid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.hedgehog.protocol.proto.ProcessExecuteReply.prototype.setPid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hedgehog.protocol.proto.ProcessStreamAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hedgehog.protocol.proto.ProcessStreamAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hedgehog.protocol.proto.ProcessStreamAction.displayName = 'proto.hedgehog.protocol.proto.ProcessStreamAction';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hedgehog.protocol.proto.ProcessStreamAction.prototype.toObject = function(opt_includeInstance) {
  return proto.hedgehog.protocol.proto.ProcessStreamAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hedgehog.protocol.proto.ProcessStreamAction} msg The msg instance to transform.
 * @return {!Object}
 */
proto.hedgehog.protocol.proto.ProcessStreamAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    pid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    fileno: jspb.Message.getFieldWithDefault(msg, 2, 0),
    chunk: msg.getChunk_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hedgehog.protocol.proto.ProcessStreamAction}
 */
proto.hedgehog.protocol.proto.ProcessStreamAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hedgehog.protocol.proto.ProcessStreamAction;
  return proto.hedgehog.protocol.proto.ProcessStreamAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hedgehog.protocol.proto.ProcessStreamAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hedgehog.protocol.proto.ProcessStreamAction}
 */
proto.hedgehog.protocol.proto.ProcessStreamAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPid(value);
      break;
    case 2:
      var value = /** @type {!proto.hedgehog.protocol.proto.ProcessFileno} */ (reader.readEnum());
      msg.setFileno(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChunk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.hedgehog.protocol.proto.ProcessStreamAction} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.hedgehog.protocol.proto.ProcessStreamAction.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hedgehog.protocol.proto.ProcessStreamAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.hedgehog.protocol.proto.ProcessStreamAction.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getFileno();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = this.getChunk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional uint32 pid = 1;
 * @return {number}
 */
proto.hedgehog.protocol.proto.ProcessStreamAction.prototype.getPid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.hedgehog.protocol.proto.ProcessStreamAction.prototype.setPid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional ProcessFileno fileno = 2;
 * @return {!proto.hedgehog.protocol.proto.ProcessFileno}
 */
proto.hedgehog.protocol.proto.ProcessStreamAction.prototype.getFileno = function() {
  return /** @type {!proto.hedgehog.protocol.proto.ProcessFileno} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.hedgehog.protocol.proto.ProcessFileno} value */
proto.hedgehog.protocol.proto.ProcessStreamAction.prototype.setFileno = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes chunk = 3;
 * @return {!(string|Uint8Array)}
 */
proto.hedgehog.protocol.proto.ProcessStreamAction.prototype.getChunk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes chunk = 3;
 * This is a type-conversion wrapper around `getChunk()`
 * @return {string}
 */
proto.hedgehog.protocol.proto.ProcessStreamAction.prototype.getChunk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChunk()));
};


/**
 * optional bytes chunk = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChunk()`
 * @return {!Uint8Array}
 */
proto.hedgehog.protocol.proto.ProcessStreamAction.prototype.getChunk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChunk()));
};


/** @param {!(string|Uint8Array)} value */
proto.hedgehog.protocol.proto.ProcessStreamAction.prototype.setChunk = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hedgehog.protocol.proto.ProcessStreamUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hedgehog.protocol.proto.ProcessStreamUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hedgehog.protocol.proto.ProcessStreamUpdate.displayName = 'proto.hedgehog.protocol.proto.ProcessStreamUpdate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hedgehog.protocol.proto.ProcessStreamUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.hedgehog.protocol.proto.ProcessStreamUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hedgehog.protocol.proto.ProcessStreamUpdate} msg The msg instance to transform.
 * @return {!Object}
 */
proto.hedgehog.protocol.proto.ProcessStreamUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    pid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    fileno: jspb.Message.getFieldWithDefault(msg, 2, 0),
    chunk: msg.getChunk_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hedgehog.protocol.proto.ProcessStreamUpdate}
 */
proto.hedgehog.protocol.proto.ProcessStreamUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hedgehog.protocol.proto.ProcessStreamUpdate;
  return proto.hedgehog.protocol.proto.ProcessStreamUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hedgehog.protocol.proto.ProcessStreamUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hedgehog.protocol.proto.ProcessStreamUpdate}
 */
proto.hedgehog.protocol.proto.ProcessStreamUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPid(value);
      break;
    case 2:
      var value = /** @type {!proto.hedgehog.protocol.proto.ProcessFileno} */ (reader.readEnum());
      msg.setFileno(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChunk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.hedgehog.protocol.proto.ProcessStreamUpdate} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.hedgehog.protocol.proto.ProcessStreamUpdate.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hedgehog.protocol.proto.ProcessStreamUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.hedgehog.protocol.proto.ProcessStreamUpdate.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getFileno();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = this.getChunk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional uint32 pid = 1;
 * @return {number}
 */
proto.hedgehog.protocol.proto.ProcessStreamUpdate.prototype.getPid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.hedgehog.protocol.proto.ProcessStreamUpdate.prototype.setPid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional ProcessFileno fileno = 2;
 * @return {!proto.hedgehog.protocol.proto.ProcessFileno}
 */
proto.hedgehog.protocol.proto.ProcessStreamUpdate.prototype.getFileno = function() {
  return /** @type {!proto.hedgehog.protocol.proto.ProcessFileno} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.hedgehog.protocol.proto.ProcessFileno} value */
proto.hedgehog.protocol.proto.ProcessStreamUpdate.prototype.setFileno = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes chunk = 3;
 * @return {!(string|Uint8Array)}
 */
proto.hedgehog.protocol.proto.ProcessStreamUpdate.prototype.getChunk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes chunk = 3;
 * This is a type-conversion wrapper around `getChunk()`
 * @return {string}
 */
proto.hedgehog.protocol.proto.ProcessStreamUpdate.prototype.getChunk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChunk()));
};


/**
 * optional bytes chunk = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChunk()`
 * @return {!Uint8Array}
 */
proto.hedgehog.protocol.proto.ProcessStreamUpdate.prototype.getChunk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChunk()));
};


/** @param {!(string|Uint8Array)} value */
proto.hedgehog.protocol.proto.ProcessStreamUpdate.prototype.setChunk = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hedgehog.protocol.proto.ProcessExitUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hedgehog.protocol.proto.ProcessExitUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hedgehog.protocol.proto.ProcessExitUpdate.displayName = 'proto.hedgehog.protocol.proto.ProcessExitUpdate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hedgehog.protocol.proto.ProcessExitUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.hedgehog.protocol.proto.ProcessExitUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hedgehog.protocol.proto.ProcessExitUpdate} msg The msg instance to transform.
 * @return {!Object}
 */
proto.hedgehog.protocol.proto.ProcessExitUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    pid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    exitCode: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hedgehog.protocol.proto.ProcessExitUpdate}
 */
proto.hedgehog.protocol.proto.ProcessExitUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hedgehog.protocol.proto.ProcessExitUpdate;
  return proto.hedgehog.protocol.proto.ProcessExitUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hedgehog.protocol.proto.ProcessExitUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hedgehog.protocol.proto.ProcessExitUpdate}
 */
proto.hedgehog.protocol.proto.ProcessExitUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setExitCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.hedgehog.protocol.proto.ProcessExitUpdate} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.hedgehog.protocol.proto.ProcessExitUpdate.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hedgehog.protocol.proto.ProcessExitUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.hedgehog.protocol.proto.ProcessExitUpdate.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getExitCode();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 pid = 1;
 * @return {number}
 */
proto.hedgehog.protocol.proto.ProcessExitUpdate.prototype.getPid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.hedgehog.protocol.proto.ProcessExitUpdate.prototype.setPid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 exit_code = 2;
 * @return {number}
 */
proto.hedgehog.protocol.proto.ProcessExitUpdate.prototype.getExitCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.hedgehog.protocol.proto.ProcessExitUpdate.prototype.setExitCode = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.hedgehog.protocol.proto.ProcessFileno = {
  STDIN: 0,
  STDOUT: 1,
  STDERR: 2
};

goog.object.extend(exports, proto.hedgehog.protocol.proto);
