/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.hedgehog.protocol.proto.MotorAction', null, global);
goog.exportSymbol('proto.hedgehog.protocol.proto.MotorRequest', null, global);
goog.exportSymbol('proto.hedgehog.protocol.proto.MotorSetPositionAction', null, global);
goog.exportSymbol('proto.hedgehog.protocol.proto.MotorState', null, global);
goog.exportSymbol('proto.hedgehog.protocol.proto.MotorStateUpdate', null, global);
goog.exportSymbol('proto.hedgehog.protocol.proto.MotorUpdate', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hedgehog.protocol.proto.MotorAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.hedgehog.protocol.proto.MotorAction.oneofGroups_);
};
goog.inherits(proto.hedgehog.protocol.proto.MotorAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hedgehog.protocol.proto.MotorAction.displayName = 'proto.hedgehog.protocol.proto.MotorAction';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.hedgehog.protocol.proto.MotorAction.oneofGroups_ = [[5,6]];

/**
 * @enum {number}
 */
proto.hedgehog.protocol.proto.MotorAction.PositionCase = {
  POSITION_NOT_SET: 0,
  RELATIVE: 5,
  ABSOLUTE: 6
};

/**
 * @return {proto.hedgehog.protocol.proto.MotorAction.PositionCase}
 */
proto.hedgehog.protocol.proto.MotorAction.prototype.getPositionCase = function() {
  return /** @type {proto.hedgehog.protocol.proto.MotorAction.PositionCase} */(jspb.Message.computeOneofCase(this, proto.hedgehog.protocol.proto.MotorAction.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hedgehog.protocol.proto.MotorAction.prototype.toObject = function(opt_includeInstance) {
  return proto.hedgehog.protocol.proto.MotorAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hedgehog.protocol.proto.MotorAction} msg The msg instance to transform.
 * @return {!Object}
 */
proto.hedgehog.protocol.proto.MotorAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    port: jspb.Message.getFieldWithDefault(msg, 1, 0),
    state: jspb.Message.getFieldWithDefault(msg, 2, 0),
    amount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    reachedState: jspb.Message.getFieldWithDefault(msg, 4, 0),
    relative: jspb.Message.getFieldWithDefault(msg, 5, 0),
    absolute: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hedgehog.protocol.proto.MotorAction}
 */
proto.hedgehog.protocol.proto.MotorAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hedgehog.protocol.proto.MotorAction;
  return proto.hedgehog.protocol.proto.MotorAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hedgehog.protocol.proto.MotorAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hedgehog.protocol.proto.MotorAction}
 */
proto.hedgehog.protocol.proto.MotorAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    case 2:
      var value = /** @type {!proto.hedgehog.protocol.proto.MotorState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setAmount(value);
      break;
    case 4:
      var value = /** @type {!proto.hedgehog.protocol.proto.MotorState} */ (reader.readEnum());
      msg.setReachedState(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setRelative(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setAbsolute(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.hedgehog.protocol.proto.MotorAction} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.hedgehog.protocol.proto.MotorAction.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hedgehog.protocol.proto.MotorAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.hedgehog.protocol.proto.MotorAction.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPort();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = this.getAmount();
  if (f !== 0) {
    writer.writeSint32(
      3,
      f
    );
  }
  f = this.getReachedState();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 5));
  if (f != null) {
    writer.writeSint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 6));
  if (f != null) {
    writer.writeSint32(
      6,
      f
    );
  }
};


/**
 * optional uint32 port = 1;
 * @return {number}
 */
proto.hedgehog.protocol.proto.MotorAction.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.hedgehog.protocol.proto.MotorAction.prototype.setPort = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional MotorState state = 2;
 * @return {!proto.hedgehog.protocol.proto.MotorState}
 */
proto.hedgehog.protocol.proto.MotorAction.prototype.getState = function() {
  return /** @type {!proto.hedgehog.protocol.proto.MotorState} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.hedgehog.protocol.proto.MotorState} value */
proto.hedgehog.protocol.proto.MotorAction.prototype.setState = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional sint32 amount = 3;
 * @return {number}
 */
proto.hedgehog.protocol.proto.MotorAction.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.hedgehog.protocol.proto.MotorAction.prototype.setAmount = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional MotorState reached_state = 4;
 * @return {!proto.hedgehog.protocol.proto.MotorState}
 */
proto.hedgehog.protocol.proto.MotorAction.prototype.getReachedState = function() {
  return /** @type {!proto.hedgehog.protocol.proto.MotorState} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.hedgehog.protocol.proto.MotorState} value */
proto.hedgehog.protocol.proto.MotorAction.prototype.setReachedState = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional sint32 relative = 5;
 * @return {number}
 */
proto.hedgehog.protocol.proto.MotorAction.prototype.getRelative = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.hedgehog.protocol.proto.MotorAction.prototype.setRelative = function(value) {
  jspb.Message.setOneofField(this, 5, proto.hedgehog.protocol.proto.MotorAction.oneofGroups_[0], value);
};


proto.hedgehog.protocol.proto.MotorAction.prototype.clearRelative = function() {
  jspb.Message.setOneofField(this, 5, proto.hedgehog.protocol.proto.MotorAction.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hedgehog.protocol.proto.MotorAction.prototype.hasRelative = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional sint32 absolute = 6;
 * @return {number}
 */
proto.hedgehog.protocol.proto.MotorAction.prototype.getAbsolute = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.hedgehog.protocol.proto.MotorAction.prototype.setAbsolute = function(value) {
  jspb.Message.setOneofField(this, 6, proto.hedgehog.protocol.proto.MotorAction.oneofGroups_[0], value);
};


proto.hedgehog.protocol.proto.MotorAction.prototype.clearAbsolute = function() {
  jspb.Message.setOneofField(this, 6, proto.hedgehog.protocol.proto.MotorAction.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hedgehog.protocol.proto.MotorAction.prototype.hasAbsolute = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hedgehog.protocol.proto.MotorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hedgehog.protocol.proto.MotorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hedgehog.protocol.proto.MotorRequest.displayName = 'proto.hedgehog.protocol.proto.MotorRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hedgehog.protocol.proto.MotorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hedgehog.protocol.proto.MotorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hedgehog.protocol.proto.MotorRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.hedgehog.protocol.proto.MotorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    port: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hedgehog.protocol.proto.MotorRequest}
 */
proto.hedgehog.protocol.proto.MotorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hedgehog.protocol.proto.MotorRequest;
  return proto.hedgehog.protocol.proto.MotorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hedgehog.protocol.proto.MotorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hedgehog.protocol.proto.MotorRequest}
 */
proto.hedgehog.protocol.proto.MotorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.hedgehog.protocol.proto.MotorRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.hedgehog.protocol.proto.MotorRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hedgehog.protocol.proto.MotorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.hedgehog.protocol.proto.MotorRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPort();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 port = 1;
 * @return {number}
 */
proto.hedgehog.protocol.proto.MotorRequest.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.hedgehog.protocol.proto.MotorRequest.prototype.setPort = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hedgehog.protocol.proto.MotorUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hedgehog.protocol.proto.MotorUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hedgehog.protocol.proto.MotorUpdate.displayName = 'proto.hedgehog.protocol.proto.MotorUpdate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hedgehog.protocol.proto.MotorUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.hedgehog.protocol.proto.MotorUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hedgehog.protocol.proto.MotorUpdate} msg The msg instance to transform.
 * @return {!Object}
 */
proto.hedgehog.protocol.proto.MotorUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    port: jspb.Message.getFieldWithDefault(msg, 1, 0),
    velocity: jspb.Message.getFieldWithDefault(msg, 2, 0),
    position: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hedgehog.protocol.proto.MotorUpdate}
 */
proto.hedgehog.protocol.proto.MotorUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hedgehog.protocol.proto.MotorUpdate;
  return proto.hedgehog.protocol.proto.MotorUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hedgehog.protocol.proto.MotorUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hedgehog.protocol.proto.MotorUpdate}
 */
proto.hedgehog.protocol.proto.MotorUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setVelocity(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.hedgehog.protocol.proto.MotorUpdate} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.hedgehog.protocol.proto.MotorUpdate.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hedgehog.protocol.proto.MotorUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.hedgehog.protocol.proto.MotorUpdate.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPort();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getVelocity();
  if (f !== 0) {
    writer.writeSint32(
      2,
      f
    );
  }
  f = this.getPosition();
  if (f !== 0) {
    writer.writeSint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 port = 1;
 * @return {number}
 */
proto.hedgehog.protocol.proto.MotorUpdate.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.hedgehog.protocol.proto.MotorUpdate.prototype.setPort = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional sint32 velocity = 2;
 * @return {number}
 */
proto.hedgehog.protocol.proto.MotorUpdate.prototype.getVelocity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.hedgehog.protocol.proto.MotorUpdate.prototype.setVelocity = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional sint32 position = 3;
 * @return {number}
 */
proto.hedgehog.protocol.proto.MotorUpdate.prototype.getPosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.hedgehog.protocol.proto.MotorUpdate.prototype.setPosition = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hedgehog.protocol.proto.MotorStateUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hedgehog.protocol.proto.MotorStateUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hedgehog.protocol.proto.MotorStateUpdate.displayName = 'proto.hedgehog.protocol.proto.MotorStateUpdate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hedgehog.protocol.proto.MotorStateUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.hedgehog.protocol.proto.MotorStateUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hedgehog.protocol.proto.MotorStateUpdate} msg The msg instance to transform.
 * @return {!Object}
 */
proto.hedgehog.protocol.proto.MotorStateUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    port: jspb.Message.getFieldWithDefault(msg, 1, 0),
    state: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hedgehog.protocol.proto.MotorStateUpdate}
 */
proto.hedgehog.protocol.proto.MotorStateUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hedgehog.protocol.proto.MotorStateUpdate;
  return proto.hedgehog.protocol.proto.MotorStateUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hedgehog.protocol.proto.MotorStateUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hedgehog.protocol.proto.MotorStateUpdate}
 */
proto.hedgehog.protocol.proto.MotorStateUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    case 2:
      var value = /** @type {!proto.hedgehog.protocol.proto.MotorState} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.hedgehog.protocol.proto.MotorStateUpdate} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.hedgehog.protocol.proto.MotorStateUpdate.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hedgehog.protocol.proto.MotorStateUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.hedgehog.protocol.proto.MotorStateUpdate.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPort();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional uint32 port = 1;
 * @return {number}
 */
proto.hedgehog.protocol.proto.MotorStateUpdate.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.hedgehog.protocol.proto.MotorStateUpdate.prototype.setPort = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional MotorState state = 2;
 * @return {!proto.hedgehog.protocol.proto.MotorState}
 */
proto.hedgehog.protocol.proto.MotorStateUpdate.prototype.getState = function() {
  return /** @type {!proto.hedgehog.protocol.proto.MotorState} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.hedgehog.protocol.proto.MotorState} value */
proto.hedgehog.protocol.proto.MotorStateUpdate.prototype.setState = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hedgehog.protocol.proto.MotorSetPositionAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hedgehog.protocol.proto.MotorSetPositionAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hedgehog.protocol.proto.MotorSetPositionAction.displayName = 'proto.hedgehog.protocol.proto.MotorSetPositionAction';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hedgehog.protocol.proto.MotorSetPositionAction.prototype.toObject = function(opt_includeInstance) {
  return proto.hedgehog.protocol.proto.MotorSetPositionAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hedgehog.protocol.proto.MotorSetPositionAction} msg The msg instance to transform.
 * @return {!Object}
 */
proto.hedgehog.protocol.proto.MotorSetPositionAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    port: jspb.Message.getFieldWithDefault(msg, 1, 0),
    position: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hedgehog.protocol.proto.MotorSetPositionAction}
 */
proto.hedgehog.protocol.proto.MotorSetPositionAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hedgehog.protocol.proto.MotorSetPositionAction;
  return proto.hedgehog.protocol.proto.MotorSetPositionAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hedgehog.protocol.proto.MotorSetPositionAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hedgehog.protocol.proto.MotorSetPositionAction}
 */
proto.hedgehog.protocol.proto.MotorSetPositionAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.hedgehog.protocol.proto.MotorSetPositionAction} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.hedgehog.protocol.proto.MotorSetPositionAction.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hedgehog.protocol.proto.MotorSetPositionAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.hedgehog.protocol.proto.MotorSetPositionAction.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPort();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getPosition();
  if (f !== 0) {
    writer.writeSint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 port = 1;
 * @return {number}
 */
proto.hedgehog.protocol.proto.MotorSetPositionAction.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.hedgehog.protocol.proto.MotorSetPositionAction.prototype.setPort = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional sint32 position = 2;
 * @return {number}
 */
proto.hedgehog.protocol.proto.MotorSetPositionAction.prototype.getPosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.hedgehog.protocol.proto.MotorSetPositionAction.prototype.setPosition = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.hedgehog.protocol.proto.MotorState = {
  POWER: 0,
  BRAKE: 1,
  VELOCITY: 2
};

goog.object.extend(exports, proto.hedgehog.protocol.proto);
